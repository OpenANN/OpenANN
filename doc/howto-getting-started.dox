namespace OpenANN {

/**

\page GettingStarted Getting Started

\section Cpp A simple example in C++

\code
#include <OpenANN/OpenANN>
#include <Eigen/Dense>
#include <iostream>

using namespace OpenANN;

int main()
{
  Eigen::MatrixXd x(1, 1);
  x.fill(2.0f);
  Eigen::MatrixXd t(1, 1);
  t.fill(5.0f);

  Net net;
  net.inputLayer(1)
     .fullyConnectedLayer(3, TANH)
     .fullyConnectedLayer(3, TANH)
     .outputLayer(1, LINEAR)
     .trainingSet(x, t);

  StoppingCriteria stop;
  stop.maximalIterations = 10;
  std::cout << "Error on training set before training: " << net.error()
      << std::endl;
  net.train(BATCH_LMA, SSE, stop);
  Eigen::VectorXd y = net(x);
  std::cout << "Error on training set after training: " << net.error()
      << std::endl;

  return 0;
}
\endcode

Compile it with pkg-config and g++ (and really make sure that pkg-config is
installed otherwise you might got misleading errors):

\code
g++ main.cpp -o openann `pkg-config --cflags --libs openann`
\endcode

\section Python A simple example in Python

\code
from openann import *
import numpy

if __name__ == "__main__":
  # Create noisy sine
  # Each column of these matrices contains an instance
  inputs = numpy.atleast_2d(numpy.linspace(0, 2*numpy.pi, 500))
  outputs = numpy.sin(numpy.random.normal(inputs, numpy.ones(500)*0.1))

  # Setup network
  net = Net()
  net.input_layer(1, True, 0.05)
  net.fully_connected_layer(200, "rectifier", True)
  net.output_layer(1, "linear")
  net.training_set(inputs, outputs)
  stop_dict = {"maximalIterations" : 10,
               "minimalValueDifferences" : 1e-8}
  net.train("lma", "sse", stop_dict)
\endcode

\section MoreExamples More Examples

Classification

  - \ref TwoSpirals

Reinforcement Learning

  - \ref PB

We also have some \ref Benchmarks that show how you can use ANNs and compare
different architectures.

*/

}