namespace OpenANN {

/**

\page GettingStarted Getting Started

\section Cpp A simple example in C++

\include "xor/xor.cpp"

Compile it with pkg-config and g++ (and really make sure that pkg-config is
installed otherwise you might got misleading errors):

\verbatim
g++ main.cpp -o openann `pkg-config --cflags --libs openann`
\endverbatim

\section Python A simple example in Python

\code
from openann import *
import numpy

if __name__ == "__main__":
  # Create dataset
  X = numpy.array([[0, 1], [0, 0], [1, 1], [1, 0]])
  Y = numpy.array([[1], [0], [0], [1]])
  D = X.shape[1]
  F = Y.shape[1]
  N = X.shape[0]
  dataset = Dataset(X, Y)

  # Create network
  net = Net()
  net.input_layer(D)
  net.fully_connected_layer(3, Activation.LOGISTIC)
  net.output_layer(F, Activation.LOGISTIC)

  # Train network
  stop_dict = {"minimalValueDifferences" : 1e-10}
  lma = LMA(stop_dict)
  lma.optimize(net, dataset)

  # Use network
  for n in range(N):
    y = net.predict(X[n])
    print y
\endcode

\section MoreExamples More Examples

Classification

  - \ref XOR
  - \ref TwoSpirals

Reinforcement Learning

  - \ref PB

We also have some \ref Benchmarks that show how you can use ANNs and compare
different architectures.

*/

}