namespace OpenANN {

/**

\page GettingStarted Getting Started

We will solve a very simple problem here to demonstrate the API of %OpenANN.

\section XORDataSet XOR Data Set

The XOR problem cannot be solved by the perceptron (a neural network with
just one neuron) and was the reason for the death of neural network
research in the 70s until backpropagation was discovered.

The data set is simple:
<table>
<tr><td>\f$ x_1 \f$</td><td>\f$ x_2 \f$</td><td>\f$ y_1 \f$</td></tr>
<tr><td>0</td><td>1</td><td>1</td></tr>
<tr><td>0</td><td>0</td><td>0</td></tr>
<tr><td>1</td><td>1</td><td>0</td></tr>
<tr><td>1</td><td>0</td><td>1</td></tr>
</table>

That means \f$ y_1 \f$ is on whenever \f$ x_1 \neq x_2 \f$. The problem is
that you cannot draw a line that separates the two classes 0 and 1. They
are not linearly separable as you can see in the following picture. Therefore,
we need at least one hidden layer to solve the problem. In the next sections
you will find C++ code and Python code that solves this problem.

\image html xor.png

\section Cpp C++

\include "xor/xor.cpp"

Compile it with pkg-config and g++ (and really make sure that pkg-config is
installed otherwise you might got misleading errors):

\verbatim
g++ main.cpp -o openann `pkg-config --cflags --libs openann`
\endverbatim

\section Python Python

\include "xor/xor.py"

\section MoreExamples More Examples

Classification

  - \ref TwoSpirals

Regression

  - \ref Sine

Reinforcement Learning

  - \ref PB

We also have some \ref Benchmarks that show how you can use ANNs and compare
different architectures.

*/

}
